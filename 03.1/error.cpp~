#include "error.h"
#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <cmath>
#include <numeric>
#include <iterator>

using namespace std;


double average(std::vector<double>::iterator begin, std::vector<double>::iterator end){
  return accumulate(begin, end, 0.0)/distance(begin,end);
}

double error(std::vector<double>::iterator begin, std::vector<double>::iterator end){
  int N = distance(begin,end);
  double sum = 0;
  for(auto it = begin; it != end; it = it+1) sum += pow(*it,2);
  if(N == 1) return 0;
  else return sqrt( (sum/N - pow(average(begin,end),2))/(N-1) );
}

double average(vector<double> v){ return average(v.begin(), v.end());}
double error(vector<double> v){ return error(v.begin(), v.end());}
  



void do_blocking_method(string filename_in, string filename_out){
  ifstream file_in;
  ofstream file_out;
  double n;
  vector<double> vec;
  vector<double> ve2;
  double prog_sum;
  double prog_su2;
  double error;
  
  file_in.open(filename_in);

  while(!file_in.eof()){
    file_in >> n;
    vec.push_back(n);
    ve2.push_back(n*n);
  }

  
  file_in.close();
  
  file_out.open(filename_out);

  for(int i=0; i<vec.size(); i++){
    prog_sum=0;
    prog_su2=0;
    for(int j=0; j<i+1; j++){
      prog_sum = prog_sum + vec[j];
      prog_su2 = prog_su2 + ve2[j];
    }
    prog_sum = prog_sum /(i+1);
    prog_su2 = prog_su2 /(i+1);
    if(i==0) error = 0;
    else error = sqrt((prog_su2 - prog_sum*prog_sum)/i);
    file_out << i+1 << "," << prog_sum << "," << error << "," << endl; 
  }

  file_out.close();
}




  

  
  
    
  
