#include <iostream>
#include "../Parallel_Random_Number_Generator/random.h"
#include "error.h"
#include <vector>
#include <cmath>
#include <fstream>

using namespace std;

int main(){


  Random rnd;
  int seed[4];
  seed [0] = 3;
  seed [1] = 5;
  seed [2] = 33;
  seed [3] = 345;
  int p1 = 5, p2 = 4;
  rnd.SetRandom(seed,p1,p2);

  /*
  int N = 100;
  int M = 100000;
  int N_tot = M*N;

  ofstream file_out;
  file_out.open("01.3_montecarlo.csv");

  double d = 4;
  double L = 2;

  vector<double> extr1(2,0);
  vector<double> extr2(2,0);
  bool hit=false;

  vector<double*> r_point(N_tot,0);
  vector<double*> r_angle;
 
  for(int i=0; i<N_tot; i++){
    r_point[i] = new double[2];
    r_point[i][0] = rnd.Rannyu(0,4);
    r_point[i][1] = rnd.Rannyu(0,4);
  }
  
  for(int i=0; i<N_tot; i++) r_angle.push_back(rnd.Uniform_Angle());

  int N_hit=0;
  int k=0;

  for(int block = 0; block < N; block++){

    N_hit = 0;
    
    for(int i=0; i<M; i++){

      k = i + block*M;
      
      for(int q=0; q<2; q++){
	extr1[q] = r_point[k][q] + r_angle[k][q];
	extr2[q] = r_point[k][q] - r_angle[k][q];
      }

      hit = !(extr1[1] > 0 and extr1[1] < 4 and extr2[1] > 0 and extr2[1] < 4);
      if(hit) N_hit += 1;
    }

    file_out << 2*L*M*1.0/(d*N_hit) << endl;

  }

  do_blocking_method("01.3_montecarlo.csv","01.3_results.csv");

  file_out.close();


  */


  ofstream file_out;
  file_out.open("dati");

  for(int i=0; i<10; i++) file_out << rnd.Rannyu() <<endl;
  file_out.close();

  do_blocking_method("dati","risultati");
  
  
  
  rnd.SaveSeed();
  
  return 0;
  

  
  
} 
